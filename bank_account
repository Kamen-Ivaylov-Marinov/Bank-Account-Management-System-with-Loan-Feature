account_holder = []
balances = []
transaction_histories = []
loans = []
MAX_LOAN_AMOUNT = 10000
INTEREST_RATE = 0.03


def create_account():
    """ Create a new account"""
    user_name = input("Enter your first and last name: ")
    account_holder.append(user_name)
    balances.append(0)
    transaction_histories.append(0)
    loans.append(0)
    return print("You have successfully created an account.")


def deposit():
    """Deposit money into an account"""
    user_name = input("Enter your first and last name: ")
    user_history = []  # account holder all history
    user_name_index = account_holder.index(user_name)  # on which index the user is located
    money_index = user_name_index  # money index must == name index
    if user_name in account_holder:
        deposit_money = float(input("What amount would you like to deposit? "))
        balances[money_index] += deposit_money
        user_history.append(balances[money_index])
        transaction_histories.insert(user_name_index, user_history)  # add the transaction action
        return print(f"You current balance is: {balances[money_index]:.2f}")
    else:
        return print(f"This account holder name -> {user_name} does not exist.")


def withdraw():
    """Withdraw money from an account"""
    user_name = input("Enter your first and last name: ")
    if user_name in account_holder:
        withdraw_money = float(input("What amount would you like to withdraw?: "))
        user_history = []  # account holder all history
        user_name_index = account_holder.index(user_name)  # on which index the user is located
        user_money_index = user_name_index  # money index must == name index

        if withdraw_money <= balances[user_money_index]:
            balances[user_money_index] -= withdraw_money  # add money to balance
            user_history.append(balances[user_money_index])
            transaction_histories.insert(user_name_index, user_history)  # add the transaction action
            return print(f"You current balance is: {balances[user_money_index]:.2f}")
        else:
            return print("Insufficient funds.")
    else:
        return print(f"This account holder name -> {user_name} <- does not exist.")


def check_balance():
    """Check the balance of an account."""
    user_name = input("Enter your first and last name: ")
    if user_name in account_holder:
        user_name_index = account_holder.index(user_name)  # on which index the user is located
        user_money_index = user_name_index  # money index must == name index
        total_amount = balances[user_money_index]  # balance current amount
        return print(f"You current balance is: {total_amount:.2f}")
    else:
        return print(f" This account holder name -> {user_name} does not exist.")


def transfer_funds():
    """Transfer funds between two accounts."""
    user_name = input("Enter your first and last name: ")
    recipient_name = input("Enter recipient's first and last name: ")
    user_history = []
    recipient_history = []
    if (user_name and recipient_name) in account_holder:
        transfer_money = float(input(f"What amount would you like to transfer to {recipient_name}? "))
        # user data
        user_name_index = account_holder.index(user_name)
        user_money_index = user_name_index

        # recipient data
        recipient_name_index = account_holder.index(recipient_name)
        recipient_money_index = recipient_name_index

        if transfer_money <= balances[user_money_index]:
            balances[user_money_index] -= transfer_money
            user_history.append(balances[user_money_index])
            transaction_histories.insert(user_name_index, user_history)
            # recipient action
            balances[recipient_money_index] += transfer_money
            recipient_history.append(balances[recipient_money_index])
            transaction_histories.insert(recipient_name_index, recipient_history)
            return print(f"You have successfully transferred-> {transfer_money:.2f} to {recipient_name}.")
        else:
            return print("Insufficient funds.")
    else:
        if user_name not in account_holder:
            return print(f"This account holder name -> {user_name} does not exist")
        elif recipient_name not in account_holder:
            return print(f"This account holder name -> {recipient_name} does not exist")
        return print(f"Both account holders name -> {user_name} and {recipient_name} does not exist")


# def view_transaction_history():
#     """View transaction history for a specific account."""
#     # 1. Prompt the user for the account holder's name.
#     # 2. Check if the account exists in the system.
#     # 3. If the account exists, display the transaction history.
#     # 4. If there are no transactions, inform the user.
#     # 5. If the account does not exist, inform the user.


# def list_accounts():
#     """List all accounts and their balances."""
#     if not account_holder == []:
#         return print(f"There are no accounts in the system.")
#     else:
#         users_list = []
#         for name in account_holder:
#             name_index = account_holder.index(name)
#             money_index = name_index
#             total_amount = balances[money_index]
#             result = f"Account holder: {name}, Balance: {total_amount}"
#             users_list.append(result)
#         return print(users_list)

#
# def apply_for_loan():
#     """Apply for a loan."""
#     name = input("Enter the account holder's name: ")
#
#     # Check if the account exists in the system
#     if name in account_holders:
#         index = account_holders.index(name)  # Find the account index
#
#         # Prompt user for the loan amount they wish to apply for
#         loan_amount = float(input(f"Enter the loan amount (max {MAX_LOAN_AMOUNT} leva): "))
#
#         # Check if the loan amount is within the limit
#         if loan_amount <= MAX_LOAN_AMOUNT:
#             # Update balance and loan amount
#             balances[index] += loan_amount
#             loans[index] += loan_amount * (1 + INTEREST_RATE)  # Calculate total loan with interest
#
#             print(f"Loan of {loan_amount:.2f} leva approved for {name}. New balance: {balances[index]:.2f} leva.")
#         else:
#             print(f"Loan amount exceeds maximum limit of {MAX_LOAN_AMOUNT} leva.")
#     else:
#         print("Account not found.")
#
#
# def repay_loan():
#     """Repay a loan."""
#     name = input("Enter the account holder's name: ")
#
#     # Check if the account exists in the system
#     if name in account_holders:
#         index = account_holders.index(name)  # Find the account index
#
#         # Prompt user for repayment amount
#         repayment_amount = float(input(f"Enter repayment amount (Outstanding loan: {loans[index]:.2f} leva): "))
#
#         # Check if the repayment amount is valid
#         if repayment_amount <= loans[index]:
#             # Update balance and outstanding loan amount
#             balances[index] -= repayment_amount
#             loans[index] -= repayment_amount
#
#             print(f"Repayment of {repayment_amount:.2f} leva accepted for {name}. Remaining loan: {loans[index]:.2f} leva.")
#         else:
#             print("Repayment amount exceeds outstanding loan.")
#     else:
#         print("Account not found.")
#
#
def display_menu():
    """Display the main menu."""
    print("\n--- Bank Account Management System ---")
    print("1. Create Account")
    print("2. Deposit")
    print("3. Withdraw")
    print("4. Check Balance")
    print("5. List Accounts")
    print("6. Transfer Funds")
    print("7. View Transaction History")
    print("8. Apply for Loan")
    print("9. Repay Loan")
    print("10. Exit")

    # Prompt user for their choice
    choice = int(input("Enter your choice: "))
    return choice


def main():
    """Main function to run the banking system."""
    while True:
        choice = display_menu()  # Display the menu and get user choice

        # Process user input based on their choice
        if choice == 1:
            create_account()
        elif choice == 2:
            deposit()
        elif choice == 3:
            withdraw()
        elif choice == 4:
            check_balance()
        # elif choice == 5:
        #     list_accounts()
        elif choice == 6:
            transfer_funds()
        # elif choice == 7:
        #     view_transaction_history()
        # elif choice == 8:
        #     apply_for_loan()
        # elif choice == 9:
        #     repay_loan()
        elif choice == 10:
            print("Exiting the system. Goodbye!")
            break  # Exit the loop and terminate the program
        else:
            print("Invalid choice. Please try again.")


main()
